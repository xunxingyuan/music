<!--  -->
<template>
  <view class="musicList">
    <repeat for="{{musicList}}" key="index" index="index" item="item">
      <view class="musicItem">
        <view class="musicShow flex" @tap="showDetail({{item}})">
          <view class="left">
            <view class="flex">
              <view class="name">{{item.title}}</view>
              <text class="free" hidden="{{item.isFree != 1}}">FREE</text>
              <text class="vip" hidden="{{item.isFree != 0}}">VIP</text>
            </view>
            <view class="count flex">
              <!-- <image class='icon' src="{{imgList.play}}" mode="scaleToFill" lazy-load="false">
              </image>-->
              <i class="iconfont icon-shipin"></i>
              <text class="count">{{item.videoList.length}}</text>
              <!-- <image class='icon' src="{{imgList.voice}}" mode="scaleToFill" lazy-load="false">
              </image>-->
              <i class="iconfont icon-laba"></i>
              <text class="count">{{item.musicList.length}}</text>
              <!-- <image class='icon' src="{{imgList.score}}" mode="scaleToFill" lazy-load="false">
              </image>-->
              <i class="iconfont icon-iconfontqupu"></i>
              <text class="count">{{item.notationList.length}}</text>
            </view>
          </view>
          <view class="right"></view>
        </view>
        <view class="detail" hidden="{{item.show === 1}}">
          <repeat for="{{item.musicList}}" key="index" index="index" item="detail">
            <view class="detailBox flex">
              <view class="detailContent" @tap.stop="checkPermission({{detail}},{{item.isFree}})">
                <view class="title">{{detail.title}}</view>
                <view class="info">
                  <!-- <text>{{detail.music}}</text> -->
                  <!-- <i class='iconfont icon-download' @tap.stop="downloadMusic({{detail}})"></i> -->
                  <text>{{detail.downloadTime}}</text>
                </view>
              </view>
              <view class="right" @tap.stop="showMusicCtrl({{detail}})">
                <text></text>
                <text></text>
                <text></text>
              </view>
            </view>
          </repeat>
        </view>
      </view>
    </repeat>
    <view class="musicCtrlBox" wx:if="{{showCtrl != 1}}" @tap="cancelShowMusicCtrl">
      <view class="flex">
        <view wx:if="{{showShare}}" class="ctrl vip" @tap.stop="shareMusic({{selectItem}})">
          <button class="share" open-type="share">分享</button>
        </view>
        <view class="ctrl vip" @tap.stop="downloadMusic({{selectItem}})">VIP-下载歌曲</view>
        <view class="ctrl vip" @tap.stop="collectMusic({{selectItem}})">VIP-收藏歌曲</view>
        <view class="ctrl" @tap.stop="showIntro">歌曲简介</view>
        <view class="ctrl cancel" @tap="cancelShowMusicCtrl">取消</view>
      </view>
    </view>
    <musicPlay wx:if="{{showMusicPlay}}" :music.sync="choseMusic" :url.sync="choseMusicUrl"></musicPlay>
  </view>
</template>

<script>
Date.prototype.Format = function(fmt) {
  //author: meizz
  var o = {
    'M+': this.getMonth() + 1, //月份
    'd+': this.getDate(), //日
    'h+': this.getHours(), //小时
    'm+': this.getMinutes(), //分
    's+': this.getSeconds(), //秒
    'q+': Math.floor((this.getMonth() + 3) / 3), //季度
    S: this.getMilliseconds() //毫秒
  };
  if (/(y+)/.test(fmt))
    fmt = fmt.replace(
      RegExp.$1,
      (this.getFullYear() + '').substr(4 - RegExp.$1.length)
    );
  for (var k in o)
    if (new RegExp('(' + k + ')').test(fmt))
      fmt = fmt.replace(
        RegExp.$1,
        RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length)
      );
  return fmt;
};
import wepy from 'wepy';
import api from '@/tools/api.js';
import MusicPlay from './play';
export default class musicList extends wepy.component {
  props = {
    musicList: Array
  };
  data = {
    playState: 'hidden',
    showCtrl: 1,
    selectMusic: '',
    selectItem: '',
    imgList: '',
    showMusicPlay: false,
    choseMusic: '',
    choseMusicUrl: '',
    showShare: false
  };
  components = {
    musicPlay: MusicPlay
  };
  methods = {
    async collectMusic(item) {
      let userId = await wepy.getStorageSync('userId');
      let userInfo = await wepy.getStorageSync('userInfo');
      let permission = JSON.parse(userInfo).permission;
      if (permission.collect == 'yes') {
        api.collect
          .collectMusic({
            musicId: item.id,
            userId: userId
          })
          .then(res => {
            wepy.showToast({
              title: '收藏成功', //提示的内容,
              icon: 'success', //图标,
              duration: 2000, //延迟时间,
              mask: true, //显示透明蒙层，防止触摸穿透,
              success: res => {}
            });
          });
      } else {
        wepy.showToast({
          title: '权限不足', //提示的内容,
          icon: 'none', //图标,
          duration: 2000, //延迟时间,
          mask: true, //显示透明蒙层，防止触摸穿透,
          success: res => {}
        });
      }
    },
    showDetail(item) {
      this.musicList.forEach(element => {
        if (element.id === item.id) {
          if (element.show == 0) {
            element.show = 1;
          } else {
            element.show = 0;
          }
        }
      });
    },
    showMusicCtrl(item) {
      this.showCtrl = 0;
      this.selectItem = item;
      console.log(this.selectItem);
      this.$emit('selectItem', item);
      this.$apply();
    },
    cancelShowMusicCtrl() {
      this.showCtrl = 1;
    },
    checkPermission(item, type) {
      let userInfo = wepy.getStorageSync('userInfo');
      let permission = JSON.parse(userInfo).permission;
      if (type == 1) {
        if (permission.playFree == 'yes') {
          this.audioPlay(item);
        } else {
          wepy.showToast({
            title: '权限不足', //提示的内容,
            icon: 'none', //图标,
            duration: 2000, //延迟时间,
            mask: true, //显示透明蒙层，防止触摸穿透,
            success: res => {}
          });
        }
      } else {
        if (permission.playVip == 'yes') {
          this.audioPlay(item);
        } else {
          wepy.showToast({
            title: '权限不足', //提示的内容,
            icon: 'none', //图标,
            duration: 2000, //延迟时间,
            mask: true, //显示透明蒙层，防止触摸穿透,
            success: res => {}
          });
        }
      }
    },
    showIntro() {
      wepy.showModal({
        title: '歌曲简介',
        content: this.selectItem.introduction,
        showCancel: false
      });
    },
    async shareMusic(item) {
      let userId = await wepy.getStorageSync('userId');
      let userInfo = await wepy.getStorageSync('userInfo');
      let permission = JSON.parse(userInfo).permission;
      if (item.isFree == 0 || permission.playFree == 'yes') {
      } else {
        wepy.showToast({
          title: '权限不足', //提示的内容,
          icon: 'none', //图标,
          duration: 2000, //延迟时间,
          mask: true, //显示透明蒙层，防止触摸穿透,
          success: res => {}
        });
      }
    },
    async downloadMusic(item) {
      // console.log(this.$parent);
      let userId = await wepy.getStorageSync('userId');
      let userInfo = await wepy.getStorageSync('userInfo');
      let permission = JSON.parse(userInfo).permission;
      if (permission.download == 'yes') {
        let header = {};
        let token = await wepy.getStorageSync('token');
        let downloadFile = await wepy.getStorageSync('downloadFile');
        let downloadData = [];
        if (downloadFile) {
          downloadData = JSON.parse(downloadFile);
        }
        header['Authorization'] = 'Bearer ' + token;
        // header['Content-Type'] = 'video/mp4';
        let downloadSrc = {
          name: item.title,
          musicId: item.id,
          url: '',
          downloadTime: new Date().Format('yyyy-MM-dd hh:mm:ss'),
          type: 'music',
          state: 'download'
        };
        let flag = false;
        downloadData.forEach(element => {
          if (element.musicId == downloadSrc.musicId) {
            flag = true;
          }
        });
        if (!flag) {
          api.music
            .saveDownload({
              musicId: item.id,
              userId: userId
            })
            .then(res => {
              wepy.showToast({
                title: '添加下载成功', //提示的内容,
                icon: 'success', //图标,
                duration: 2000, //延迟时间,
                mask: true, //显示透明蒙层，防止触摸穿透,
                success: res => {}
              });
            });
          downloadData.push(downloadSrc);
          wepy.setStorageSync('downloadFile', JSON.stringify(downloadData));
          wepy.downloadFile({
            url: item.url, // 下载资源的 url
            header: header,
            success: res => {
              //console.log(res.tempFilePath);
              wepy.saveFile({
                tempFilePath: res.tempFilePath, //需要保存的文件的临时路径,
                success: resp => {
                  downloadData.forEach(element => {
                    if (element.musicId === downloadSrc.musicId) {
                      element.url = resp.savedFilePath;
                      element.state = 'finish';
                    }
                  });
                  wepy.setStorageSync(
                    'downloadFile',
                    JSON.stringify(downloadData)
                  );
                  // wepy.showToast({
                  //   title: '下载完成', //提示的内容,
                  //   icon: 'success', //图标,
                  //   duration: 2000, //延迟时间,
                  //   mask: true, //显示透明蒙层，防止触摸穿透,
                  //   success: res => {}
                  // });
                },
                fail: error => {
                  //console.log(error);
                  downloadData.forEach(element => {
                    if (element.musicId === downloadSrc.musicId) {
                      element.url = '';
                      element.state = 'error';
                    }
                  });
                  wepy.setStorageSync(
                    'downloadFile',
                    JSON.stringify(downloadData)
                  );
                  wepy.showToast({
                    title:
                      '已下载文件大小超过10M，下载失败，请删除部分已下载内容后再试', //提示的内容,
                    icon: 'none', //图标,
                    duration: 2000, //延迟时间,
                    mask: true, //显示透明蒙层，防止触摸穿透,
                    success: res => {}
                  });
                }
              });
            },
            fail: () => {
              wepy.showToast({
                title: '下载失败', //提示的内容,
                icon: 'none', //图标,
                duration: 2000, //延迟时间,
                mask: true, //显示透明蒙层，防止触摸穿透,
                success: res => {}
              });
            },
            complete: res => {}
          });
        } else {
          wepy.showToast({
            title: '该文件已在下载列表中,如需下载请删除后重试', //提示的内容,
            icon: 'none', //图标,
            duration: 2000, //延迟时间,
            mask: true, //显示透明蒙层，防止触摸穿透,
            success: res => {}
          });
        }
      } else {
        wepy.showToast({
          title: '权限不足', //提示的内容,
          icon: 'none', //图标,
          duration: 2000, //延迟时间,
          mask: true, //显示透明蒙层，防止触摸穿透,
          success: res => {}
        });
      }
    }
  };
  events = {
    closePlay: function() {
      this.showMusicPlay = false;
      this.choseMusicUrl = '';
      this.$apply();
    }
  };

  watch = {};
  computed = {};
  async onLoad() {
    this.imgList = this.$parent.$parent.globalData.imgList;
    let music = wepy.getStorageSync('playState');
    let detail = JSON.parse(music);
    if (detail.name && detail.url) {
      this.showMusicPlay = true;
      this.$apply();
    }
    let userId = await wepy.getStorageSync('userId');
    let userInfo = await wepy.getStorageSync('userInfo');
    let permission = JSON.parse(userInfo).permission;
    if (permission.playVip == 'yes') {
      this.showShare = true;
    }

    this.$apply();
  }
  audioPlay(item) {
    this.choseMusic = item.title;
    this.choseMusicUrl = item.url;
    this.showMusicPlay = true;
    this.$apply();
  }
}
</script>

<style lang='less'>
.musicList {
  width: 100%;
  height: auto;
  margin-bottom: 180rpx;

  .musicItem {
    background: #fff;
    border-bottom: solid 1px #ddd;
    padding: 1rem;
    align-items: center;
    justify-content: space-between;
    .musicShow {
      justify-content: flex-start;
      .left {
        .flex {
          justify-content: flex-start;
        }
        .icon {
          width: 12px;
          height: 12px;
          margin-right: 3px;
        }
        .name {
          font-size: 18px;
        }
        .free,
        .vip {
          font-size: 12px;
          padding: 2px 4px;
          border-radius: 2px;
          margin-left: 0.5rem;
        }
        .free {
          background: #f0fcf4;
          color: #67a677;
        }
        .vip {
          background: #d0b485;
          color: #fff;
        }
        .count {
          font-size: 12px;
          color: #a9a9a9;
          margin-right: 1rem;
          margin-top: 3px;
        }
      }
    }
    .right {
      display: flex;
      flex-flow: column;
      align-items: center;
      justify-content: center;
      min-width: 30rpx;
      min-height: 60rpx;
      text {
        width: 4px;
        height: 4px;
        border-radius: 2px;
        background: #a9a9a9;
        margin: 2px 0;
      }
    }
    .detail {
      width: 100%;
      .detailBox {
        justify-content: space-between;
        margin-top: 0.5rem;
        .detailContent {
          font-size: 14px;
          padding-left: 1rem;
          flex: 1;
          display: flex;
          align-items: center;
          justify-content: space-between;
          .title {
            color: green;
          }
          .info {
            font-size: 12px;
            text {
              margin-right: 0.5rem;
              color: #c1c1c1;
            }
          }
        }
      }
    }
  }
  .musicCtrlBox {
    position: fixed;
    z-index: 100;
    width: 100%;
    height: 100%;
    bottom: 0;
    left: 0;
    background: rgba(0, 0, 0, 0.7);
    .flex {
      height: 100%;
      display: flex;
      flex-flow: column;
      justify-content: flex-end;
      .ctrl {
        height: 100rpx;
        background: #fff;
        width: 100%;
        line-height: 100rpx;
        text-align: center;
        font-size: 14px;
        border-bottom: solid 1px #ddd;
        .share {
          outline: none;
          border: none;
          background: transparent;
          color: #d0b485;
          font-size: 14px;
          border-radius: 0;
          height: 100rpx;
          line-height: 100rpx;
        }
        .share::after {
          border: none;
        }
      }
      .vip {
        color: #d0b485;
      }
      .cancel {
        color: #999;
      }
    }
  }
}
</style>